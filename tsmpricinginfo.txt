Price Sources will return a numerical quantity in gold/silver/copper, and can be split between external and internal sources. External sources are provided by and/or calculated by TradeSkillMaster, such as DBMarket or DBRegionSaleAvg from AuctionDB, and internal sources are derived or calculated from other configurations and activity you have set or recorded in the addon, such as crafting or avgbuy.
 

TSM Accounting
avgBuy (Avg Buy Price)
avgSell (Avg Sell Price)
maxBuy (Max Buy Price)
maxSell (Max Sell Price)
minBuy (Min Buy Price)
minSell (Min Sell Price)
SmartAvgBuy (Smart Avg Buy Price)
From TSM Accounting, avgBuy and avgSell will return the average price for all purchases and sales for a particular item, respectively. In TSM 4.10, the 'Smart Averages' option has been retired in favour of a new Price Source you can reference separately and independently: SmartAvgBuy - This will return your average purchase price across your last X purchases of the item, where X is the quantity of the item you currently possess. If you do not possess the item then SmartAvgBuy will be invalid.
minBuy and maxBuy are the minimum and maximum price you've purchased an item for in your Accounting data. Conversely, minSell and maxSell are the minimum and maximum price you've sold an item for in your Accounting data.

 

TSM Crafting
Crafting (Crafting Cost)
matPrice (Crafting Material Cost)
From the TSM Crafting module, the Crafting cost of an item is the sum of the material prices (matPrice) of each individual item used to craft the recipe. You can change how matPrice is calculated by default in your Crafting options under 'Default Price Settings', you can also change the individual matPrice for items in the Materials tab of your Crafting page. An item can only have a matPrice if you have a recipe that uses the item as a material. You can not reference the Crafting cost of an item if you do not have the recipe.

 

TSM Core
Destroy (Destroy Value)
vendorBuy (Buy from Vendor)
vendorSell (Sell to Vendor)
A particular items Destroy value is the value of the items you would receive by destroying it, on average. Destroying an item can be done by milling, prospecting or disenchanting it. By default, the Destroy value is calculated with the DBMarket values of the items you would receive, you can change this in your Tooltip Options.

vendorSell is the value of a particular item when you sell it to a vendor. vendorBuy is the cost of a particular item you can purchase from a vendor. Note that vendorBuy is only populated for a particular item when you visit a vendor that can sell it.



TSM Operations
AuctioningOpMax (First Auctioning Operation Max Price)
AuctioningOpMin (First Auctioning Operation Min Price)
AuctioningOpNormal (First Auctioning Operation Normal Price)
ShoppingOpMax (Shopping Operation Max Price)
SniperOpMax (Sniper Operation Below Price)

Introduced in TSM 4.10, these Value Sources are generated by the Operations applied to your Groups. From the first Auctioning Operation assigned to your group, AuctioningOpMax, AuctioningOpMin, and AuctioningOpNormal will return a numerical quantity in gold of the Maximum, Minimum, and Normal post price, respectively. Similarly, ShoppingOpMax and SniperOpMax will return a gold numerical quantity of the Maximum Shopping Price and the Maximum Sniper Price from the Shopping and Sniper operation, respectively, assigned to your group.

 


TSM AuctionDB has several sources that offer item values in reference to your specific realm and your region.

TSM AuctionDB - Realm
DBMinBuyout (AuctionDB - Minimum Buyout)
DBMarket (AuctionDB - Market Value)
DBRecent (AuctionDB - Recent Value)
DBHistorical (AuctionDB - Historical Price)
DBMinBuyout is the lowest priced auction on your realms Auction House, as of the last pricing update processed from Blizzard's Auction House API. This value is not 'real-time', your pricing data may be 30 minutes or older before the next pricing update. If an auction is posted between pricing updates, this value does not get updated with the new lowest priced auction until the next pricing update. If there are no auctions for a particular item on your realms Auction House, DBMinBuyout could be an invalid price source.

DBMarket is a weighted 14-day average of the auctions listed for a particular item on your realms Auction House, favoring the most recent 3 days of pricing data. It is explained in much more detail on the AuctionDB Market Value page. Note this value does not indicate what an item will sell for, only what the item is currently being listed for on your realms Auction House.

DBRecentis similar to the AuctionDB Market Value of a particular item on your realms Auction House, however the calculation is not averaged over time and is only applied to the latest price snap shot processed by TSM. The first three steps of the AuctionDB Market Value are applied.

DBHistorical is a 60 day average of the DBMarket value for a particular item on your realms Auction House.
 

TSM AuctionDB - Region
DBRegionMarketAvg (AuctionDB - Region Market Value Average)
DBRegionHistorical (AuctionDB - Region Historical Price)
DBRegionSaleAvg (AuctionDB - Region Sale Average)
DBRegionMarketAvg is the average of DBMarket across all the realms in your region for a particular item.

DBRegionHistorical is a 60 day average of DBRegionMarketAvg for a particular item in your region.

DBRegionSaleAvg is the average sale and purchase price for a particular item in your region. This data is collected from TSM Accounting data via the TSM Desktop Application.






Value Sources will return a positive integer or a decimal number, and can also be split between external and internal sources. External sources are provided by and/or calculated by TradeSkillMaster, such as DBRegionSaleRate from AuctionDB or the RequiredLevel of an item, and internal sources are derived or calculated from other activity you have recorded in the addon, such as NumExpires or NumInventory.


TSM Accounting
NumExpires (Expires Since Last Sale)
SaleRate (Sale Rate)

From TSM Accounting, NumExpires will return an integer for the number of times an item has expired or been cancelled from the Auction House since the last time it was sold. SaleRate will return a decimal number that shows your personal Sale Rate of an item i.e a SaleRate of 0.4 indicates an item has sold for you 40% of the time you have posted it.



TSM Core
ItemLevel (Item Level)
ItemQuality (Item Quality)
RequiredLevel (Required Level)
NumInventory (Total Inventory Quantity)

From TSM Core, there are three Value Sources available to reference the ItemLevel, ItemQuality and RequiredLevel of a particular item. NumInventory will return an integer indicating the number of an item you currently possess.  



TSM AuctionDB
DBRegionSaleRate (AuctionDB - Region Sale Rate (via TSM App))
DBRegionSoldPerDay (AuctionDB - Region Sold Per Day (via TSM App))

From TSM AuctionDB, DBRegionSaleRate will return a decimal number that indicates the Sale Rate of a particular item averaged across all Auction Houses in your Region i.e a DBRegionSaleRate of 0.4 indicates an item will sell on average 40% of the times it is posted per Auction House in your Region. DBRegionSoldPerDay will return a decimal number indicating the volume of an item that is sold on average per Auction House per day in your Region.




Functions are expressions or terms that can be used as building blocks to combine Price Sources and Value Sources to answer questions or create decision points. They cannot be used in isolation, and don't inherently provide any numerical quantities without being applied to a Price Source, Value Source or a combination thereof.

Arithmetic Operators
You can use basic arithmetic such as '+', '-', '*', and '/' in your custom prices. In addition, you can use any number of parentheses. There is also an advanced operator for the exponent '^'

Examples
dbmarket + 5g
(dbmarket / 2) + crafting
((dbmarket + 10g) + (dbhistorical + 10g)) * 2
(vendorbuy + 100g) / 2

crafting / 0.95 
Tip

Dividing by / 0.95 will account for the 5% Auction House Sale Cut

Percent of Price Source
You can use '%' as a shorthand for '/100 *' (which is the definition of percentage)

Examples
50% dbmarket

110% crafting

vendorbuy
Tip

100% is implied if no % is used. In the example, vendorbuy is the same as 100% vendorbuy

min() and max()
The min() and max() functions will evaluate to the lowest or highest of the valid parameters respectively. If any of the parameters are invalid, they will be silently ignored (unless they all are).

Examples
min(50% dbmarket, 100g)
min(dbmarket, dbregionmarketavg)
max(vendorsell, dbminbuyout, avgsell, 20g)
first()
Returns the first parameter which is a valid price. This can be useful to specify a fallback price in case something is invalid (i.e. if you're using market value and the item has not been posted to your auction house in 14 days).

Examples
first(dbmarket, dbregionmarketavg)
first(avgsell, crafting, 100g)
avg()
Returns the average, or mean, of the valid parameters between the parentheses, i.e the sum divided by the count.

Examples
avg(dbmarket, dbregionmarketavg)
avg(crafting, avgbuy)
check()
This is a simple logic check in the format check(a, b, c).
If the first parameter a is greater than 0, the second parameter b is returned. Otherwise, if the first parameter a is equal to or less than 0, the third parameter c is returned. If a is invalid, the string is invalid.

Example
check(dbmarket - 1000g, 95% dbmarket, 50% dbmarket)
check(50g-100g, 1g, 2g)
convert()
This is a special function for dealing with item conversions. The convert() function has one required parameter which is the price source to be used in calculating the value of the items which convert to the target item. This parameter cannot be a custom price string and must be simply a price source. Conversions include milling, prospecting, transforming (e.g. greater essences to lesser essences and vice versa) and also vendor trades for inks. The function will return the lowest cost of all possible conversions of the item.

 

Examples
convert(dbmarket)
Item Parameters
Any price source can be evaluated as a function where you pass an item link or item string in order to evaluate the price source for that specific item. By default, the price source will be evaluated for the item for which the entire custom price is being evaluated. This also works for convert() as the second parameter.

 

Examples
dbminbuyout([Ghost Iron Ore])
matprice([Ink of Dreams])
dbmarket + convert(dbminbuyout, item:79251)

Logic Functions
Advanced Logic Functions allow you to input multiple Price or Value Sources and evaluate a single output through various logic gates and operations. The IF functions will take 3 or 4 parameters where the 4th parameter is optional.

ifgt() and ifgte()
"If Greater Than" in the format ifgt(a, b, c, d)
"If Greater Than or Equal To" in the format ifgte(a, b, c, d)
If parameter a is greater than (or equal to) to parameter b, then parameter c is returned. Otherwise, if parameter a is not greater than (or equal to) parameter b, then parameter d is returned. Parameter d can be omitted, and would result in the operation being "invalid" if parameter d would have otherwise been returned.

Examples
ifgt(dbmarket, 100g, 50% dbmarket, 20g)
ifgt(dbregionsalerate, 0.3, 10% crafting, 50% crafting)
ifgte(numinventory, 2000, 50% avgsell)
iflt() and iflte()
"If Less Than" in the format iflt(a, b, c, d)
"If Less Than or Equal To" in the format iflte(a, b, c, d)
If parameter a is less than (or equal to) to parameter b, then parameter c is returned. Otherwise, if parameter a is not less than (or equal to) parameter b, then parameter d is returned. Parameter d can be omitted, and would result in the operation being "invalid" if parameter d would have otherwise been returned.

Examples
iflt(crafting, 100g, 50)
iflt(itemlevel, 300, 50% dbmarket, ifgt(itemlevel, 350, 90% dbregionmarketavg)
iflte(salerate, 0.5, 500, 5000)
ifeq()
"If Equal To" in the format ifeq(a, b, c, d)
If parameter a is equal to parameter b, then parameter c is returned. Otherwise, if parameter a is not equal to parameter b, then parameter d is returned. Parameter d can be omitted and would result in the operation being "invalid" if parameter d would have otherwise been returned.

Examples
ifeq(numinventory, 10, 50g)
ifeq(dbregionsalerate, 0.1, 50% dbmarket)
Rounding
Rounding functions will take 1 or 2 parameters, where the 1st parameter is the numerical quantity in gold you want to round, and the 2nd parameter is the factor you want to round to. If the 2nd parameter is not defined, rounding is done to the nearest copper, as appropriate.

"Standard Round" in the format round(a, b)
"Round Up" or Ceiling, in the format roundup(a, b)
"Round Down" or Floor, in the format rounddown(a, b) 

Examples
round(crafting, 10s)
roundup(avg(dbmarket, dbregionmarketavg), 10g))
rounddown(avgbuy)